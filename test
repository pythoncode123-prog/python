import csv
import configparser
import logging
from datetime import datetime
import os
import subprocess
import tempfile
import pyodbc  # Keep this for SQL Server connections

def load_config(config_path):
    """Load database configuration from file."""
    config = configparser.ConfigParser()
    config.read(config_path)
    db_config = config['DATABASE']
    return {
        'host': db_config['DBHost'],
        'port': db_config['Port'],
        'service': db_config['ServiceName'],
        'schema': db_config['SchemaName'],
        'user': db_config['Username'],
        'password': db_config['Password'],
        'db_type': db_config.get('DBType', 'SQLSERVER')
    }

def connect_sql_server(cfg):
    """Connect to SQL server using configuration."""
    conn_str = (
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={cfg['host']},{cfg['port']};"
        f"DATABASE={cfg['service']};"
        f"UID={cfg['user']};"
        f"PWD={cfg['password']}"
    )
    return pyodbc.connect(conn_str)

def execute_oracle_query(cfg, query, output_csv):
    """Execute Oracle query using sqlplus with a connection file."""
    # Create a directory for temp files if it doesn't exist
    temp_dir = os.path.join(os.path.expanduser("~"), "oracle_temp")
    os.makedirs(temp_dir, exist_ok=True)
    
    # Create SQL file
    sql_file_path = os.path.join(temp_dir, "query.sql")
    with open(sql_file_path, 'w') as sql_file:
        sql_file.write("SET ECHO OFF\n")
        sql_file.write("SET HEADING ON\n")
        sql_file.write("SET PAGESIZE 0\n")
        sql_file.write("SET LINESIZE 32767\n")
        sql_file.write("SET FEEDBACK OFF\n")
        sql_file.write("SET COLSEP ','\n")
        sql_file.write("SET TRIMSPOOL ON\n")
        sql_file.write(f"SPOOL {output_csv}\n")
        sql_file.write(f"{query};\n")
        sql_file.write("SPOOL OFF\n")
        sql_file.write("EXIT\n")
    
    # Create connection info file
    connect_file_path = os.path.join(temp_dir, "connect.txt")
    with open(connect_file_path, 'w') as connect_file:
        connect_file.write(f"{cfg['user']}/{cfg['password']}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={cfg['host']})(PORT={cfg['port']}))(CONNECT_DATA=(SERVICE_NAME={cfg['service']})))")
    
    try:
        # Execute using connection file
        cmd = f'sqlplus -S "@{connect_file_path}" @{sql_file_path}'
        logging.info(f"Executing Oracle query using SQL*Plus with connection file")
        
        # Run the command
        process = subprocess.run(cmd, shell=True, check=True, 
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                               text=True)
        
        # Check if the output CSV was created successfully
        if os.path.exists(output_csv) and os.path.getsize(output_csv) > 0:
            logging.info(f"Query results exported to {output_csv}")
            # Clean up temp files
            os.remove(sql_file_path)
            os.remove(connect_file_path)
            return True
        else:
            logging.error("SQL*Plus execution failed to create CSV file")
            logging.error(f"STDOUT: {process.stdout}")
            logging.error(f"STDERR: {process.stderr}")
            return False
    except subprocess.CalledProcessError as e:
        logging.error(f"SQL*Plus execution error: {e}")
        logging.error(f"STDOUT: {e.stdout}")
        logging.error(f"STDERR: {e.stderr}")
        return False
    except Exception as e:
        logging.error(f"Error in Oracle SQL execution: {str(e)}")
        # Clean up in case of error
        if os.path.exists(sql_file_path):
            os.remove(sql_file_path)
        if os.path.exists(connect_file_path):
            os.remove(connect_file_path)
        return False
    finally:
        # Additional cleanup for safety
        try:
            if os.path.exists(sql_file_path):
                os.remove(sql_file_path)
            if os.path.exists(connect_file_path):
                os.remove(connect_file_path)
        except Exception as cleanup_error:
            logging.warning(f"Error cleaning up temporary files: {cleanup_error}")

def sql_to_csv(config_file, query_file, output_csv, execution_timestamp=None):
    """Execute SQL and export to CSV."""
    logging.info("Starting SQL to CSV process")
    try:
        # Check query file exists
        if not os.path.exists(query_file):
            logging.error(f"Query file '{query_file}' not found")
            return False

        cfg = load_config(config_file)
        with open(query_file, 'r', encoding='utf-8') as f:
            query = f.read()
        query = query.replace('<EM_schema>', cfg['schema'])
        
        # Execute appropriate database query
        if cfg.get('db_type', '').upper() == 'ORACLE':
            return execute_oracle_query(cfg, query, output_csv)
        else:
            conn = connect_sql_server(cfg)  # Default to SQL Server
            cursor = conn.cursor()
            cursor.execute(query)
            
            columns = [column[0] for column in cursor.description]
            with open(output_csv, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(columns)
                for row in cursor:
                    writer.writerow(row)
            
            cursor.close()
            conn.close()
            logging.info(f"SQL Server query results exported to {output_csv}")
            return True
    except Exception as e:
        logging.error(f"Error in SQL to CSV process: {str(e)}")
        return False
