#!/usr/bin/env python3
"""
Setup script to securely store Confluence credentials.
This script prompts for passwords and encrypts them using SecureConfig.
"""

import os
import sys
import json
import getpass
import logging
from pathlib import Path

# Add the lib directory to path to import SecureConfig
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'lib'))
from secure_config import SecureConfig

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def setup_secure():
    """
    Main setup function to collect and encrypt credentials.
    """
    print("\n" + "="*50)
    print("SECURE CONFIGURATION SETUP")
    print("="*50)
    
    # Ensure config directory exists
    config_dir = os.path.join(os.path.dirname(__file__), 'config')
    os.makedirs(config_dir, exist_ok=True)
    
    config_file = os.path.join(config_dir, 'config.json')
    
    # Load existing config if it exists
    config = {}
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
            print(f"\nExisting configuration found at: {config_file}")
        except Exception as e:
            logging.warning(f"Could not load existing config: {e}")
    
    # Check if we need to create or regenerate the encryption key
    regenerate_key = False
    if os.path.exists(SecureConfig.KEY_FILE):
        response = input("\nEncryption key already exists. Regenerate? (y/N): ").strip().lower()
        regenerate_key = response == 'y'
    else:
        print("\nNo encryption key found. Creating new key...")
        regenerate_key = True
    
    if regenerate_key:
        # Optional: Use a passphrase for key derivation
        use_passphrase = input("\nUse a passphrase for key generation? (y/N): ").strip().lower()
        if use_passphrase == 'y':
            passphrase = getpass.getpass("Enter passphrase for key generation: ")
            passphrase_confirm = getpass.getpass("Confirm passphrase: ")
            if passphrase != passphrase_confirm:
                print("ERROR: Passphrases do not match!")
                return False
            key = SecureConfig.generate_key(passphrase)
        else:
            key = SecureConfig.generate_key()
        
        if not key:
            print("ERROR: Failed to generate encryption key!")
            return False
        print("✓ Encryption key generated successfully")
    
    # Collect Confluence credentials
    print("\n" + "-"*50)
    print("CONFLUENCE CONFIGURATION")
    print("-"*50)
    
    # Confluence URL
    default_url = config.get('CONFLUENCE_URL', '')
    confluence_url = input(f"Confluence URL [{default_url}]: ").strip()
    if not confluence_url and default_url:
        confluence_url = default_url
    
    if not confluence_url:
        print("ERROR: Confluence URL is required!")
        return False
    
    # Confluence Username
    default_username = config.get('CONFLUENCE_USERNAME', '')
    confluence_username = input(f"Confluence Username [{default_username}]: ").strip()
    if not confluence_username and default_username:
        confluence_username = default_username
    
    if not confluence_username:
        print("ERROR: Confluence username is required!")
        return False
    
    # Confluence Password - This is what was missing!
    print("\n** Confluence Password/API Token **")
    print("Note: For Confluence Cloud, use an API token instead of password")
    print("Generate token at: https://id.atlassian.com/manage/api-tokens")
    
    confluence_password = getpass.getpass("Enter Confluence password/API token: ")
    if not confluence_password:
        print("ERROR: Confluence password/API token is required!")
        return False
    
    # Confirm password
    confluence_password_confirm = getpass.getpass("Confirm password/API token: ")
    if confluence_password != confluence_password_confirm:
        print("ERROR: Passwords do not match!")
        return False
    
    # Encrypt the Confluence password
    print("\nEncrypting Confluence password...")
    encrypted_password = SecureConfig.encrypt_password(confluence_password)
    
    if not encrypted_password:
        print("ERROR: Failed to encrypt password!")
        return False
    
    print("✓ Password encrypted successfully")
    
    # Update configuration
    config.update({
        'CONFLUENCE_URL': confluence_url,
        'CONFLUENCE_USERNAME': confluence_username,
        'CONFLUENCE_PASSWORD_ENCRYPTED': encrypted_password
    })
    
    # Optional: Collect additional settings
    collect_additional = input("\nConfigure additional settings? (y/N): ").strip().lower()
    if collect_additional == 'y':
        # Space key
        default_space = config.get('CONFLUENCE_SPACE_KEY', '')
        space_key = input(f"Default Confluence Space Key [{default_space}]: ").strip()
        if space_key:
            config['CONFLUENCE_SPACE_KEY'] = space_key
        
        # Page update interval
        default_interval = config.get('UPDATE_INTERVAL_MINUTES', 60)
        interval = input(f"Update interval (minutes) [{default_interval}]: ").strip()
        if interval and interval.isdigit():
            config['UPDATE_INTERVAL_MINUTES'] = int(interval)
    
    # Save configuration
    print("\nSaving configuration...")
    try:
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=4)
        print(f"✓ Configuration saved to: {config_file}")
    except Exception as e:
        print(f"ERROR: Failed to save configuration: {e}")
        return False
    
    # Test the configuration
    test_config = input("\nTest the configuration? (Y/n): ").strip().lower()
    if test_config != 'n':
        print("\nTesting configuration...")
        test_success = test_confluence_connection(config)
        if test_success:
            print("✓ Connection test successful!")
        else:
            print("✗ Connection test failed. Please check your credentials.")
    
    print("\n" + "="*50)
    print("SETUP COMPLETE")
    print("="*50)
    print("\nYour Confluence password has been encrypted and stored securely.")
    print(f"Encryption key location: {SecureConfig.KEY_FILE}")
    print(f"Configuration location: {config_file}")
    print("\n⚠️  Keep the .secure_key file safe - it's needed to decrypt your password!")
    
    return True


def test_confluence_connection(config):
    """
    Test the Confluence connection with the encrypted credentials.
    """
    try:
        # Decrypt the password
        encrypted_password = config.get('CONFLUENCE_PASSWORD_ENCRYPTED')
        if not encrypted_password:
            print("ERROR: No encrypted password found in config")
            return False
        
        password = SecureConfig.decrypt_password(encrypted_password)
        if not password:
            print("ERROR: Failed to decrypt password")
            return False
        
        # Try to connect to Confluence (you'll need to add your Confluence library)
        # Example with atlassian-python-api:
        try:
            from atlassian import Confluence
            
            confluence = Confluence(
                url=config['CONFLUENCE_URL'],
                username=config['CONFLUENCE_USERNAME'],
                password=password
            )
            
            # Try a simple API call
            user_info = confluence.get_current_user()
            print(f"✓ Connected as: {user_info.get('displayName', 'Unknown')}")
            return True
            
        except ImportError:
            print("Note: Install atlassian-python-api to test connection")
            print("  pip install atlassian-python-api")
            # Skip the actual test if library isn't installed
            return True
            
    except Exception as e:
        logging.error(f"Connection test failed: {e}")
        return False


if __name__ == "__main__":
    try:
        success = setup_secure()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        logging.error(f"Setup failed: {e}")
        sys.exit(1)
