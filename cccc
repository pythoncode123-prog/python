#!/usr/bin/env python3
import os
import sys
import getpass
import argparse
import json
from lib.secure_config import SecureConfig

def main():
    parser = argparse.ArgumentParser(description="Setup secure configuration with encrypted password")
    parser.add_argument("--password", help="Confluence password (not recommended, use interactive prompt instead)")
    parser.add_argument("--config", help="Config file path (default: config.json)", default="config.json")
    args = parser.parse_args()

    print("\n=== Secure Configuration Setup ===")
    
    # Get password
    if args.password:
        password = args.password
        print("WARNING: Providing password on command line is not secure!")
    else:
        password = getpass.getpass("Enter Confluence password: ")
        confirm = getpass.getpass("Confirm password: ")
        if password != confirm:
            print("Passwords do not match!")
            return 1
    
    # Generate key if it doesn't exist
    if not os.path.exists(SecureConfig.KEY_FILE):
        print("Generating encryption key...")
        key = SecureConfig.generate_key()
        if not key:
            print("Failed to generate encryption key!")
            return 1
    
    # Load or create config
    config_file = args.config
    config = {}
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
        except Exception as e:
            print(f"Error loading config file: {str(e)}")
            return 1
    else:
        # Create default config
        config = {
            "CONFLUENCE_URL": "https://alm-confluence.systems.uk.hsbc/confluence/rest/api/content/",
            "USERNAME": "45292857",
            "AUTH_TYPE": "basic",
            "SPACE_KEY": "DIGIBAP",
            "PAGE_TITLE": "CIReleaseNote9",
            "BASELINE": 1899206
        }
    
    # Encrypt password and update config
    print("Encrypting password...")
    encrypted_password = SecureConfig.encrypt_password(password)
    if not encrypted_password:
        print("Failed to encrypt password!")
        return 1
    
    # Update config with encrypted password
    config['PASSWORD_ENCRYPTED'] = encrypted_password
    
    # Save config
    try:
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        print(f"Error saving config file: {str(e)}")
        return 1
    
    print("\nPassword encrypted and config updated successfully!")
    print(f"Key file: {SecureConfig.KEY_FILE}")
    print(f"Config file: {config_file}")
    print("\nIMPORTANT: Keep your key file secure. It is needed to decrypt the password.")
    print("You can now run the main script without having to enter the password.")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
