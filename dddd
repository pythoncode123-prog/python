"""
Task scheduling and execution for the Change Scheduler service.
"""
import threading
import time
import logging
import requests
from core.config import TARGET_ENDPOINT, REQUEST_TIMEOUT, STATUS_CHECK_INTERVAL

logger = logging.getLogger("scheduler")

class TaskScheduler:
    """Scheduler for executing tasks at their scheduled times and periodic polling."""
    
    def __init__(self, task_store):
        """Initialize the task scheduler."""
        self.task_store = task_store
        self.task_queue = queue.PriorityQueue()
        self.is_running = False
        self.polling_thread = None
        self.scheduler_thread = None
    
    def start(self):
        """Start the scheduler and polling."""
        if self.is_running:
            return
        
        self.is_running = True

        # Start the task scheduler loop
        self.scheduler_thread = threading.Thread(target=self._scheduler_loop)
        self.scheduler_thread.daemon = True
        self.scheduler_thread.start()

        # Start the polling loop
        self.polling_thread = threading.Thread(target=self._polling_loop)
        self.polling_thread.daemon = True
        self.polling_thread.start()

        logger.info("Task scheduler and polling started")
    
    def stop(self):
        """Stop the scheduler and polling."""
        if not self.is_running:
            return
        
        self.is_running = False

        # Stop scheduler thread
        if self.scheduler_thread and self.scheduler_thread.is_alive():
            self.scheduler_thread.join(timeout=5.0)

        # Stop polling thread
        if self.polling_thread and self.polling_thread.is_alive():
            self.polling_thread.join(timeout=5.0)

        logger.info("Task scheduler and polling stopped")
    
    def _polling_loop(self):
        """Periodic polling loop to send requests to the target endpoint."""
        while self.is_running:
            try:
                logger.info(f"Polling the target endpoint: {TARGET_ENDPOINT}")
                response = requests.get(TARGET_ENDPOINT, timeout=REQUEST_TIMEOUT)
                logger.info(f"Polling response: {response.status_code} {response.text}")
            except Exception as e:
                logger.error(f"Error during polling: {str(e)}")
            
            # Sleep for the polling interval
            time.sleep(STATUS_CHECK_INTERVAL)
    
    def _scheduler_loop(self):
        """Main scheduling loop."""
        while self.is_running:
            try:
                # Process scheduled tasks if any
                if not self.task_queue.empty():
                    next_time, change_number = self.task_queue.queue[0]
                    now = datetime.datetime.utcnow().timestamp()
                    
                    if next_time <= now:
                        self.task_queue.get()
                        task = self.task_store.get(change_number)
                        if task:
                            self.execute_task(task)
                            self.task_store.remove(change_number)
                    else:
                        time.sleep(min(next_time - now, 1.0))
                else:
                    time.sleep(1.0)
            except Exception as e:
                logger.error(f"Error in scheduler loop: {str(e)}")
                time.sleep(1.0)
    
    def execute_task(self, task):
        """Execute a scheduled task."""
        try:
            change_number = task['change_number']
            implementation_time = task['implementation_time']
            logger.info(f"Executing change {change_number} scheduled for {implementation_time}")
            
            response = requests.get(TARGET_ENDPOINT, timeout=REQUEST_TIMEOUT)
            logger.info(f"Task {change_number} execution response: {response.status_code} {response.text}")
        except Exception as e:
            logger.error(f"Error executing task: {str(e)}")
