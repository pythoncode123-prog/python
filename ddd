import os
import base64
from cryptography.fernet import Fernet
import logging

class SecureConfig:
    KEY_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "secure.key")
    
    @classmethod
    def generate_key(cls):
        """Generate a new Fernet key and save it to KEY_FILE."""
        try:
            key = Fernet.generate_key()
            with open(cls.KEY_FILE, 'wb') as key_file:
                key_file.write(key)
            return key
        except Exception as e:
            logging.error(f"Error generating key: {str(e)}")
            return None
    
    @classmethod
    def _load_key(cls):
        """Load the key from KEY_FILE or generate a new one if it doesn't exist."""
        if not os.path.exists(cls.KEY_FILE):
            return cls.generate_key()
        
        try:
            with open(cls.KEY_FILE, 'rb') as key_file:
                key = key_file.read()
            # Validate key format
            if not key or len(key) != 44 or not key.startswith(b''):
                logging.error("Invalid key format. Regenerating...")
                return cls.generate_key()
            return key
        except Exception as e:
            logging.error(f"Error loading key: {str(e)}")
            return None
    
    @classmethod
    def encrypt_password(cls, password):
        """Encrypt the password using the key from KEY_FILE."""
        try:
            key = cls._load_key()
            if not key:
                return None
                
            # Ensure password is bytes
            password_bytes = password.encode() if isinstance(password, str) else password
            
            # Create Fernet cipher and encrypt
            cipher = Fernet(key)
            encrypted_password = cipher.encrypt(password_bytes)
            
            # Convert to string for storage
            return encrypted_password.decode()
        except Exception as e:
            logging.error(f"Error encrypting password: {str(e)}")
            return None
    
    @classmethod
    def decrypt_password(cls, encrypted_password):
        """Decrypt the password using the key from KEY_FILE."""
        try:
            key = cls._load_key()
            if not key:
                logging.error("Failed to load encryption key")
                return None
                
            # Ensure encrypted_password is bytes
            encrypted_bytes = encrypted_password.encode() if isinstance(encrypted_password, str) else encrypted_password
            
            # Create Fernet cipher and decrypt
            cipher = Fernet(key)
            decrypted_password = cipher.decrypt(encrypted_bytes)
            
            # Convert back to string
            return decrypted_password.decode()
        except Exception as e:
            logging.error(f"Error decrypting password: {str(e)}")
            return None
