#!/usr/bin/env python3
import os
import sys
import getpass
import argparse
import json
import configparser
import datetime
from lib.secure_config import SecureConfig

def get_ini_files(base_dir="config", pattern="db_*.ini"):
    """Find all DB INI files in the config directory."""
    import glob
    search_path = os.path.join(base_dir, pattern)
    return glob.glob(search_path)

def read_username_from_ini(ini_file):
    """Extract username from the INI file."""
    if not os.path.exists(ini_file):
        return None
    
    config = configparser.ConfigParser()
    try:
        config.read(ini_file)
        if 'DATABASE' in config and 'Username' in config['DATABASE']:
            return config['DATABASE']['Username']
    except Exception:
        pass
    return None

def encrypt_confluence_password(username, password, config_file="config.json"):
    """Encrypt Confluence password and save to JSON config file."""
    # Load or create config
    config = {}
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
        except Exception as e:
            print(f"Error loading config file: {str(e)}")
            return False
    else:
        # Create default config
        config = {
            "CONFLUENCE_URL": "https://alm-confluence.systems.uk.hsbc/confluence/rest/api/content/",
            "USERNAME": username,
            "AUTH_TYPE": "basic",
            "SPACE_KEY": "DIGIBAP",
            "PAGE_TITLE": "CIReleaseNote9",
            "BASELINE": 1899206
        }
    
    # Encrypt password and update config
    print(f"Encrypting Confluence password for {username}...")
    encrypted_password = SecureConfig.encrypt_password(password)
    if not encrypted_password:
        print("Failed to encrypt password!")
        return False
    
    # Update config with encrypted password
    config['PASSWORD_ENCRYPTED'] = encrypted_password
    
    # Save config
    try:
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        print(f"Error saving config file: {str(e)}")
        return False
    
    print(f"\nConfluence password encrypted and saved to {config_file}")
    return True

def encrypt_db_password(username, password, ini_file):
    """Encrypt database password and save to INI config file."""
    # Load config
    config = configparser.ConfigParser()
    if not os.path.exists(ini_file):
        print(f"INI file not found: {ini_file}")
        return False
    
    try:
        config.read(ini_file)
    except Exception as e:
        print(f"Error loading INI file: {str(e)}")
        return False
    
    # Check if DATABASE section exists
    if 'DATABASE' not in config:
        print("Error: 'DATABASE' section not found in INI file.")
        return False
    
    # Encrypt password and update config
    print(f"Encrypting database password for {username} in {os.path.basename(ini_file)}...")
    encrypted_password = SecureConfig.encrypt_password(password)
    if not encrypted_password:
        print("Failed to encrypt password!")
        return False
    
    # Update config with encrypted password
    config['DATABASE']['Password_Encrypted'] = encrypted_password
    
    # Keep the original password field if needed for backward compatibility
    if 'Password' not in config['DATABASE']:
        config['DATABASE']['Password'] = '[ENCRYPTED - See Password_Encrypted]'
    
    # Save config
    try:
        with open(ini_file, 'w') as f:
            config.write(f)
    except Exception as e:
        print(f"Error saving INI file: {str(e)}")
        return False
    
    print(f"Database password encrypted and saved to {ini_file}")
    return True

def main():
    parser = argparse.ArgumentParser(description="Setup secure configuration with encrypted password")
    parser.add_argument("--confluence", action="store_true", help="Encrypt Confluence password")
    parser.add_argument("--db", action="store_true", help="Encrypt database passwords")
    parser.add_argument("--json", dest="json_file", help="JSON config file path (default: config.json)", default="config.json")
    parser.add_argument("--config-dir", help="Directory with DB INI files (default: config)", default="config")
    parser.add_argument("--skip-prompt", action="store_true", help="Skip password prompt if already encrypted")
    args = parser.parse_args()

    # If no specific flags, default to both
    if not (args.confluence or args.db):
        args.confluence = True
        args.db = True

    timestamp = "2025-08-24 14:05:50"  # Current timestamp provided
    username = "satish537"  # Current username provided

    print("\n=== Secure Configuration Setup ===")
    print(f"Current time: {timestamp}")
    print(f"User: {username}")
    
    # Generate key if it doesn't exist
    if not os.path.exists(SecureConfig.KEY_FILE):
        print("Generating encryption key...")
        key = SecureConfig.generate_key()
        if not key:
            print("Failed to generate encryption key!")
            return 1

    # Handle Confluence password
    if args.confluence:
        # Check if already encrypted
        is_encrypted = False
        if os.path.exists(args.json_file):
            try:
                with open(args.json_file, 'r') as f:
                    config = json.load(f)
                    if 'PASSWORD_ENCRYPTED' in config:
                        is_encrypted = True
            except Exception:
                pass
        
        if is_encrypted and args.skip_prompt:
            print("Confluence password already encrypted. Skipping due to --skip-prompt.")
        else:
            # Get username from config if possible
            conf_username = username
            if os.path.exists(args.json_file):
                try:
                    with open(args.json_file, 'r') as f:
                        config = json.load(f)
                        if 'USERNAME' in config:
                            conf_username = config['USERNAME']
                except Exception:
                    pass
            
            print(f"\nEncrypting Confluence password for {conf_username}")
            choice = input("Continue? (y/n): ").strip().lower()
            if choice == 'y':
                password = getpass.getpass(f"Enter Confluence password for {conf_username}: ")
                confirm = getpass.getpass("Confirm password: ")
                if password != confirm:
                    print("Passwords do not match!")
                    return 1
                
                if not encrypt_confluence_password(conf_username, password, args.json_file):
                    return 1
            else:
                print("Skipping Confluence password encryption.")

    # Handle DB passwords
    if args.db:
        # Find DB INI files
        ini_files = get_ini_files(args.config_dir)
        if not ini_files:
            print(f"No database INI files found in {args.config_dir}")
        
        for ini_file in ini_files:
            db_username = read_username_from_ini(ini_file)
            if not db_username:
                print(f"Warning: Could not read username from {ini_file}")
                db_username = "unknown"
            
            # Check if already encrypted
            is_encrypted = False
            config = configparser.ConfigParser()
            try:
                config.read(ini_file)
                if 'DATABASE' in config and 'Password_Encrypted' in config['DATABASE']:
                    is_encrypted = True
            except Exception:
                pass
            
            if is_encrypted and args.skip_prompt:
                print(f"Password for {db_username} in {os.path.basename(ini_file)} already encrypted. Skipping due to --skip-prompt.")
                continue
            
            print(f"\nEncrypting database password for {db_username} in {os.path.basename(ini_file)}")
            choice = input("Continue? (y/n): ").strip().lower()
            if choice == 'y':
                password = getpass.getpass(f"Enter database password for {db_username}: ")
                confirm = getpass.getpass("Confirm password: ")
                if password != confirm:
                    print("Passwords do not match!")
                    return 1
                
                if not encrypt_db_password(db_username, password, ini_file):
                    print(f"Failed to encrypt password for {ini_file}")
                    continue
            else:
                print(f"Skipping password encryption for {os.path.basename(ini_file)}")
    
    print("\nPassword encryption process completed!")
    print(f"Key file: {SecureConfig.KEY_FILE}")
    print("\nIMPORTANT: Keep your key file secure. It is needed to decrypt passwords.")
    print("You can now run the main script without having to enter passwords.")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
