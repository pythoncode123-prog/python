def run_workflow_multi_enhanced(countries, default_output_csv, execution_timestamp, execution_user, 
                               test_mode=False, publish_test=True, target_month=None, is_daily_mode=False):
    """
    Enhanced multi-country workflow that handles both database countries and CSV file countries.
    FIXED: Handle potential None values from process_csv_file_countries
    """
    # If no target month specified, use current month
    if not target_month:
        target_month = datetime.now().strftime('%Y%m')
    
    logging.info(f"="*60)
    logging.info(f"Starting ENHANCED multi-country workflow for month: {target_month}")
    logging.info(f"Mode: {'YTD/Daily' if is_daily_mode else 'Monthly'}")
    logging.info(f"Database countries: {[c['name'] for c in countries]}")
    logging.info(f"="*60)
    
    # Create date-based folder for organization
    today_folder = datetime.now().strftime('%Y-%m-%d')
    output_dir = os.path.join('reports', today_folder)
    os.makedirs(output_dir, exist_ok=True)
    
    original_cwd = os.getcwd()
    
    try:
        # Step 1: Process database countries (existing logic)
        country_results = []
        for country in countries:
            country_name = country['name']
            config_file = country['config_file']
            query_file = country['query_file']
            output_csv = os.path.join(output_dir, f"data_{country_name.lower()}.csv")
            
            logging.info(f"Processing database country: {country_name}")
            
            if test_mode:
                # Create dummy test data for database countries
                try:
                    with open(output_csv, 'w') as f:
                        f.write("NET_DATE,TOTAL_JOBS\n")
                        for day in range(1, 31):
                            date_str = f"2025-09-{day:02d} 00:00:00"
                            jobs = 5000 + (day * 100)
                            f.write(f"{date_str},{jobs}\n")
                    logging.info(f"Created test data for {country_name}")
                except Exception as e:
                    logging.error(f"Failed to create test data for {country_name}: {e}")
                    continue
            else:
                result = run_workflow(
                    config_file, query_file, output_csv,
                    execution_timestamp, execution_user,
                    test_mode=test_mode, publish_test=False
                )
                
                if result != 0:
                    logging.error(f"Failed to process database country {country_name}")
                    continue
            
            if os.path.exists(output_csv):
                country_results.append({
                    'name': country_name,
                    'csv_file': output_csv,
                    'success': True,
                    'source': 'database'
                })
                logging.info(f"Successfully processed database country: {country_name}")
        
        # Step 2: Process CSV file countries with daily mode flag
        csv_countries_processed = process_csv_file_countries(
            output_dir, target_month, test_mode, is_daily_mode=is_daily_mode
        )
        
        # SAFETY CHECK: Ensure we have a list, not None
        if csv_countries_processed is None:
            logging.error("process_csv_file_countries returned None, using empty list")
            csv_countries_processed = []
        
        # Add CSV countries to results
        country_results.extend(csv_countries_processed)
        
        # Step 3: Verify we have data to process
        successful_countries = [r for r in country_results if r['success']]
        if not successful_countries:
            logging.error("No countries processed successfully")
            return False
        
        # Log summary of data sources
        db_countries = [r for r in successful_countries if r['source'] == 'database']
        csv_countries = [r for r in successful_countries if r['source'] == 'csv_file']
        
        logging.info(f"Data sources summary:")
        logging.info(f"  Database countries: {len(db_countries)} - {[r['name'] for r in db_countries]}")
        logging.info(f"  CSV file countries: {len(csv_countries)} - {[r['name'] for r in csv_countries]}")
        
        # Rest of the function remains the same...
        # [Continue with the rest of the function]
