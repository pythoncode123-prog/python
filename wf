import logging
from datetime import datetime
import os
import shutil  # Added for file copying operations
from lib.db_utils import sql_to_csv
from lib.csv_processor import CSVProcessor
from lib.confluence_publisher import publish_to_confluence

def run_workflow(config_file, query_file, output_csv, execution_timestamp, execution_user, test_mode=False, publish_test=True):
    """Run the complete workflow.
    
    Args:
        config_file: Path to config file for database connection
        query_file: Path to SQL query file
        output_csv: Output CSV filename
        execution_timestamp: Timestamp for execution
        execution_user: Username of executing user
        test_mode: Whether to run in test mode
        publish_test: Whether to publish to Confluence in test mode (default: True)
    """
    print(f"Starting workflow at {datetime.now()}")
    
    # Step 1: SQL to CSV (or use test file in test mode)
    print("Step 1: SQL to CSV...")
    
    if test_mode:
        print("Running in TEST MODE - using predefined test data")
        test_file = "task_usage_report_test.csv"
        
        # Check if the test file exists
        if not os.path.exists(test_file):
            logging.error(f"Test file {test_file} not found.")
            print(f"ERROR: Test file {test_file} not found.")
            return 1
            
        # Copy the test file to the expected output location
        shutil.copy(test_file, output_csv)
        logging.info(f"Using test file: {test_file}")
        sql_result = True
    else:
        # Normal operation - get data from SQL
        sql_result = sql_to_csv(config_file, query_file, output_csv)
        
    if not sql_result:
        print("ERROR: SQL to CSV process failed. Check log for details.")
        return 1
    print("SQL to CSV completed successfully.")
    
    # Step 2: CSV Processing
    print("\nStep 2: CSV Processing...")
    processor = CSVProcessor(execution_timestamp, execution_user)
    
    # If in test mode, use the special test file names
    output_prefix = "test_" if test_mode else ""
    
    process_result = processor.process_all_files(output_csv, output_prefix=output_prefix)
    if not process_result:
        print("ERROR: CSV processing failed. Check log for details.")
        return 2
    print("CSV Processing completed successfully.")
    
    # Step 3: Confluence Publishing
    print("\nStep 3: Confluence Publishing...")
    # Pass test_mode flag to confluence publisher
    report_file = f"{output_prefix}task_usage_report_by_region.csv"
    
    # Set publishing test mode flag based on parameters
    skip_actual_upload = test_mode and not publish_test
    
    confluence_result = publish_to_confluence(
        report_file=report_file,
        test_mode=test_mode,
        skip_actual_upload=skip_actual_upload
    )
    if not confluence_result:
        print("ERROR: Confluence publishing failed. Check log for details.")
        return 3
    
    print("\nComplete workflow executed successfully!")
    return 0
